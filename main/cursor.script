local constants = require("main.modules.constants")
local logic = require("main.modules.logic")
local rendercam = require "rendercam.rendercam"

function init(self)
	self.score = 0
	msg.post(".",  "acquire_input_focus")
end

local STONE_WIDTH = constants.STONE_WIDTH
local STONE_HEIGHT = constants.STONE_HEIGHT

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		print('on_input', action.screen_x, action.screen_y)
		pos, data =rendercam.screen_to_world_2d(action.screen_x, action.screen_y)		
		go.set_position(pos, ".")	
		end
	if action_id == hash("touch") and action.pressed then
		-- go.set_position(vmath.vector3(
		-- 	action.screen_x / 3,
		-- 	action.screen_y / 3,
		-- 	1
		-- ), ".")	
		-- print('action: ', action.x, action.y)
		print('action: ', action.screen_x, action.screen_y)
		-- 		window_width, window_height = window.get_size()
-- 		print(window_width)
-- 		print(window_width - STONE_WIDTH * constants.ZOOM)
-- 
-- 		factory.create("main#first-stone-factory", vmath.vector3(
-- 			action.x,
-- 			action.y,
-- 			1
-- 		))
-- 			
-- 		local x = math.floor(action.x / STONE_WIDTH)
-- 		local y = math.floor(action.y / STONE_HEIGHT)
-- 		if not logic.can_put(x, y) then
-- 			return
-- 		end
-- 		logic.put(x, y)
-- 		factory.create(
-- 			logic.turn() == 1 and "main#first-stone-factory" or "main#second-stone-factory",
-- 			vmath.vector3(x * STONE_WIDTH, y * STONE_HEIGHT, 0)
-- 		)
-- 		local is_finish = logic.is_finish()
-- 		print('is_finish: ', is_finish)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("touch") then
		print("cursor.on_message", message_id, sender)
		print(logic.find_position_by_id(msg.url(sender).path))
	-- 	go.set_position(vmath.vector3(
	-- 		-1000, -1000, 1
	-- 	), ".")	
	end
end